{"ast":null,"code":"const mockCalculateNER = (pkg, term, discountRate, managementCosts, packages) => {\n  // Base NER calculation\n  let baseNER = 45 + Math.random() * 5; // Random starting point between 45 and 50\n\n  // Adjust NER based on term\n  baseNER -= (term - 2) * 1; // $1 decrease for each year longer than 2 years\n\n  // Adjust NER based on package\n  if (pkg === 'B') {\n    baseNER *= 1.15; // 15% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 1.30; // 30% higher for Package C\n  }\n\n  // Apply premium increase\n  const premiumMultiplier = 1 + discountRate / 100;\n  baseNER *= premiumMultiplier;\n\n  // Add some minor randomness (±$0.50)\n  const randomFactor = Math.random() - 0.5;\n  baseNER += randomFactor;\n\n  // Round to two decimal places\n  return Math.round(baseNER * 100) / 100;\n};\nexport default mockCalculateNER;","map":{"version":3,"names":["mockCalculateNER","pkg","term","discountRate","managementCosts","packages","baseNER","Math","random","premiumMultiplier","randomFactor","round"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/mockCalculateNER.ts"],"sourcesContent":["import { Package, ManagementCosts } from './data';\n\nconst mockCalculateNER = (\n  pkg: string, \n  term: number, \n  discountRate: number,\n  managementCosts: ManagementCosts,\n  packages: { [key: string]: Package }\n): number => {\n  // Base NER calculation\n  let baseNER = 45 + (Math.random() * 5); // Random starting point between 45 and 50\n\n  // Adjust NER based on term\n  baseNER -= (term - 2) * 1; // $1 decrease for each year longer than 2 years\n\n  // Adjust NER based on package\n  if (pkg === 'B') {\n    baseNER *= 1.15; // 15% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 1.30; // 30% higher for Package C\n  }\n\n  // Apply premium increase\n  const premiumMultiplier = 1 + (discountRate / 100);\n  baseNER *= premiumMultiplier;\n\n  // Add some minor randomness (±$0.50)\n  const randomFactor = (Math.random() - 0.5);\n  baseNER += randomFactor;\n\n  // Round to two decimal places\n  return Math.round(baseNER * 100) / 100;\n};\n\nexport default mockCalculateNER;"],"mappings":"AAEA,MAAMA,gBAAgB,GAAGA,CACvBC,GAAW,EACXC,IAAY,EACZC,YAAoB,EACpBC,eAAgC,EAChCC,QAAoC,KACzB;EACX;EACA,IAAIC,OAAO,GAAG,EAAE,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAE,CAAC,CAAC;;EAExC;EACAF,OAAO,IAAI,CAACJ,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE3B;EACA,IAAID,GAAG,KAAK,GAAG,EAAE;IACfK,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM,IAAIL,GAAG,KAAK,GAAG,EAAE;IACtBK,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB;;EAEA;EACA,MAAMG,iBAAiB,GAAG,CAAC,GAAIN,YAAY,GAAG,GAAI;EAClDG,OAAO,IAAIG,iBAAiB;;EAE5B;EACA,MAAMC,YAAY,GAAIH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI;EAC1CF,OAAO,IAAII,YAAY;;EAEvB;EACA,OAAOH,IAAI,CAACI,KAAK,CAACL,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG;AACxC,CAAC;AAED,eAAeN,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}