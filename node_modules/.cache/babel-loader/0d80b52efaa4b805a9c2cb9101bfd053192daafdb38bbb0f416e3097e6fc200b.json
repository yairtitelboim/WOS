{"ast":null,"code":"import { RSF } from './data';\nconst calculateNER = (pkg, term, discountRate, managementCosts, packages) => {\n  console.log(`calculateNER called with pkg: ${pkg}, term: ${term}, discountRate: ${discountRate}`);\n  if (!pkg || !term || isNaN(term) || !discountRate || isNaN(discountRate)) {\n    console.error('Invalid inputs to calculateNER:', {\n      pkg,\n      term,\n      discountRate\n    });\n    return 0;\n  }\n  const monthlyRevenues = [];\n  const monthlyCosts = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // Base rent and OpEx (common to all packages)\n    monthlyRevenue += managementCosts.preOccupancy['Term Rent'] * RSF / 12;\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n\n    // Package-specific calculations\n    const packageItems = packages[pkg].items;\n    packageItems.forEach(item => {\n      if (managementCosts.preOccupancy[item]) {\n        monthlyRevenue += managementCosts.preOccupancy[item] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy[item] * RSF / (term * 12);\n      }\n      if (managementCosts.recurring[item]) {\n        monthlyRevenue += managementCosts.recurring[item];\n        monthlyCost += managementCosts.recurring[item];\n      }\n    });\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n  }\n\n  // Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = npv * monthlyRate * (1 + monthlyRate) ** numberOfPayments / ((1 + monthlyRate) ** numberOfPayments - 1);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = ner * 12 / RSF;\n  console.log(`Annual NER per square foot for package ${pkg}: $${annualNERPerSqFt.toFixed(2)}`);\n  return annualNERPerSqFt;\n};\nexport default calculateNER;","map":{"version":3,"names":["RSF","calculateNER","pkg","term","discountRate","managementCosts","packages","console","log","isNaN","error","monthlyRevenues","monthlyCosts","month","monthlyRevenue","monthlyCost","preOccupancy","recurring","packageItems","items","forEach","item","push","cashFlows","map","revenue","index","monthlyRate","npv","reduce","sum","cf","Math","pow","numberOfPayments","ner","annualNERPerSqFt","toFixed"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/calculateNER.ts"],"sourcesContent":["import { RSF, ManagementCosts, Package } from './data';\n\nconst calculateNER = (pkg: string, term: number, discountRate: number, managementCosts: ManagementCosts, packages: { [key: string]: Package }): number => {\n  console.log(`calculateNER called with pkg: ${pkg}, term: ${term}, discountRate: ${discountRate}`);\n\n  if (!pkg || !term || isNaN(term) || !discountRate || isNaN(discountRate)) {\n    console.error('Invalid inputs to calculateNER:', { pkg, term, discountRate });\n    return 0;\n  }\n\n  const monthlyRevenues: number[] = [];\n  const monthlyCosts: number[] = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // Base rent and OpEx (common to all packages)\n    monthlyRevenue += (managementCosts.preOccupancy['Term Rent'] * RSF) / 12;\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n\n    // Package-specific calculations\n    const packageItems = packages[pkg].items;\n    packageItems.forEach(item => {\n      if (managementCosts.preOccupancy[item]) {\n        monthlyRevenue += (managementCosts.preOccupancy[item] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy[item] * RSF) / (term * 12);\n      }\n      if (managementCosts.recurring[item]) {\n        monthlyRevenue += managementCosts.recurring[item];\n        monthlyCost += managementCosts.recurring[item];\n      }\n    });\n\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n  }\n\n  // Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = (npv * monthlyRate * (1 + monthlyRate) ** numberOfPayments) / ((1 + monthlyRate) ** numberOfPayments - 1);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = (ner * 12) / RSF;\n\n  console.log(`Annual NER per square foot for package ${pkg}: $${annualNERPerSqFt.toFixed(2)}`);\n\n  return annualNERPerSqFt;\n};\n\nexport default calculateNER;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}