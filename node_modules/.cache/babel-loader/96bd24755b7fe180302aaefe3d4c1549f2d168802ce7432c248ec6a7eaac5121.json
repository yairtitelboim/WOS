{"ast":null,"code":"import { RSF, managementCosts } from './data';\nconst calculateNER = (pkg, term, discountRate) => {\n  console.log(`calculateNER called with pkg: ${pkg}, term: ${term}, discountRate: ${discountRate}`);\n  if (!pkg || !term || isNaN(term) || !discountRate || isNaN(discountRate)) {\n    console.error('Invalid inputs to calculateNER:', {\n      pkg,\n      term,\n      discountRate\n    });\n    return 0;\n  }\n\n  // console.log(`\\nCalculating NER for Package ${pkg}, Term: ${term} years, Discount Rate: ${discountRate * 100}%`);\n  // console.log(`RSF: ${RSF}`);\n\n  const monthlyRevenues = [];\n  const monthlyCosts = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // Base rent and OpEx (common to all packages)\n    monthlyRevenue += managementCosts.preOccupancy['Term Rent'] * RSF / 12;\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n\n    // Package-specific calculations\n    switch (pkg) {\n      case 'A':\n        // WiFi\n        monthlyRevenue += managementCosts.recurring['WiFi'];\n        monthlyCost += managementCosts.recurring['WiFi'] + managementCosts.preOccupancy['Upfront WiFi'] * RSF / (term * 12);\n\n        // Branding/Signage\n        monthlyRevenue += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n        break;\n      case 'B':\n        // Include everything from A, plus additional services\n        monthlyRevenue += managementCosts.recurring['WiFi'];\n        monthlyCost += managementCosts.recurring['WiFi'] + managementCosts.preOccupancy['Upfront WiFi'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n\n        // Additional B services\n        monthlyRevenue += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n        monthlyCost += managementCosts.recurring['Plants'] * RSF;\n        monthlyRevenue += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.recurring['F&B'];\n        monthlyCost += managementCosts.recurring['F&B'];\n        break;\n      case 'C':\n        // Include everything from B, plus additional services\n        monthlyRevenue += managementCosts.recurring['WiFi'];\n        monthlyCost += managementCosts.recurring['WiFi'] + managementCosts.preOccupancy['Upfront WiFi'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n        monthlyCost += managementCosts.recurring['Plants'] * RSF;\n        monthlyRevenue += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n        monthlyCost += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n        monthlyRevenue += managementCosts.recurring['F&B'];\n        monthlyCost += managementCosts.recurring['F&B'];\n\n        // Additional C services\n        monthlyRevenue += managementCosts.recurring['Dedicated WX'];\n        monthlyCost += managementCosts.recurring['Dedicated WX'];\n        monthlyRevenue += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n        monthlyCost += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n        break;\n    }\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n\n    // Log details for the first month\n    if (month === 0) {\n      // console.log('\\nFirst Month Details:');\n      // console.log(`Revenue: $${monthlyRevenue.toFixed(2)}`);\n      // console.log(`Cost: $${monthlyCost.toFixed(2)}`);\n    }\n  }\n\n  // Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Log average monthly figures\n  const avgMonthlyRevenue = monthlyRevenues.reduce((sum, value) => sum + value, 0) / monthlyRevenues.length;\n  const avgMonthlyCost = monthlyCosts.reduce((sum, value) => sum + value, 0) / monthlyCosts.length;\n  const avgMonthlyCashFlow = cashFlows.reduce((sum, value) => sum + value, 0) / cashFlows.length;\n\n  // Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // console.log(`\\nNPV: $${npv.toFixed(2)}`);\n\n  // Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = npv * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));\n\n  // console.log(`Monthly NER: $${ner.toFixed(2)}`);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = ner * 12 / RSF;\n  // console.log(`Annual NER per square foot: $${annualNERPerSqFt.toFixed(2)}`);\n\n  // console.log(`Final monthlyRevenue: ${monthlyRevenues[0]}`);\n  // console.log(`Final monthlyCost: ${monthlyCosts[0]}`);\n  // console.log(`Final annualNERPerSqFt: ${annualNERPerSqFt}`);\n\n  return annualNERPerSqFt;\n};\nexport default calculateNER;","map":{"version":3,"names":["RSF","managementCosts","calculateNER","pkg","term","discountRate","console","log","isNaN","error","monthlyRevenues","monthlyCosts","month","monthlyRevenue","monthlyCost","preOccupancy","recurring","push","cashFlows","map","revenue","index","avgMonthlyRevenue","reduce","sum","value","length","avgMonthlyCost","avgMonthlyCashFlow","monthlyRate","npv","cf","Math","pow","numberOfPayments","ner","annualNERPerSqFt"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/calculateNER.ts"],"sourcesContent":["import { RSF, managementCosts, packages } from './data';\n\nconst calculateNER = (pkg: string, term: number, discountRate: number): number => {\n  console.log(`calculateNER called with pkg: ${pkg}, term: ${term}, discountRate: ${discountRate}`);\n\n  if (!pkg || !term || isNaN(term) || !discountRate || isNaN(discountRate)) {\n    console.error('Invalid inputs to calculateNER:', { pkg, term, discountRate });\n    return 0;\n  }\n\n  // console.log(`\\nCalculating NER for Package ${pkg}, Term: ${term} years, Discount Rate: ${discountRate * 100}%`);\n  // console.log(`RSF: ${RSF}`);\n\n  const monthlyRevenues: number[] = [];\n  const monthlyCosts: number[] = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // Base rent and OpEx (common to all packages)\n    monthlyRevenue += (managementCosts.preOccupancy['Term Rent'] * RSF) / 12;\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n\n    // Package-specific calculations\n    switch(pkg) {\n      case 'A':\n        // WiFi\n        monthlyRevenue += managementCosts.recurring['WiFi'];\n        monthlyCost += managementCosts.recurring['WiFi'] + (managementCosts.preOccupancy['Upfront WiFi'] * RSF) / (term * 12);\n        \n        // Branding/Signage\n        monthlyRevenue += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n        break;\n\n      case 'B':\n        // Include everything from A, plus additional services\n        monthlyRevenue += managementCosts.recurring['WiFi'];\n        monthlyCost += managementCosts.recurring['WiFi'] + (managementCosts.preOccupancy['Upfront WiFi'] * RSF) / (term * 12);\n        monthlyRevenue += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n\n        // Additional B services\n        monthlyRevenue += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n        monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n        monthlyCost += managementCosts.recurring['Plants'] * RSF;\n        monthlyRevenue += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n        monthlyRevenue += managementCosts.recurring['F&B'];\n        monthlyCost += managementCosts.recurring['F&B'];\n        break;\n\n      case 'C':\n        // Include everything from B, plus additional services\n        monthlyRevenue += managementCosts.recurring['WiFi'];\n        monthlyCost += managementCosts.recurring['WiFi'] + (managementCosts.preOccupancy['Upfront WiFi'] * RSF) / (term * 12);\n        monthlyRevenue += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n        monthlyRevenue += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n        monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n        monthlyCost += managementCosts.recurring['Plants'] * RSF;\n        monthlyRevenue += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n        monthlyCost += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n        monthlyRevenue += managementCosts.recurring['F&B'];\n        monthlyCost += managementCosts.recurring['F&B'];\n\n        // Additional C services\n        monthlyRevenue += managementCosts.recurring['Dedicated WX'];\n        monthlyCost += managementCosts.recurring['Dedicated WX'];\n        monthlyRevenue += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n        monthlyCost += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n        break;\n    }\n\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n\n    // Log details for the first month\n    if (month === 0) {\n      // console.log('\\nFirst Month Details:');\n      // console.log(`Revenue: $${monthlyRevenue.toFixed(2)}`);\n      // console.log(`Cost: $${monthlyCost.toFixed(2)}`);\n    }\n  }\n\n  // Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Log average monthly figures\n  const avgMonthlyRevenue = monthlyRevenues.reduce((sum, value) => sum + value, 0) / monthlyRevenues.length;\n  const avgMonthlyCost = monthlyCosts.reduce((sum, value) => sum + value, 0) / monthlyCosts.length;\n  const avgMonthlyCashFlow = cashFlows.reduce((sum, value) => sum + value, 0) / cashFlows.length;\n\n\n\n  // Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // console.log(`\\nNPV: $${npv.toFixed(2)}`);\n\n  // Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = (npv * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));\n\n  // console.log(`Monthly NER: $${ner.toFixed(2)}`);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = (ner * 12) / RSF;\n  // console.log(`Annual NER per square foot: $${annualNERPerSqFt.toFixed(2)}`);\n\n\n  // console.log(`Final monthlyRevenue: ${monthlyRevenues[0]}`);\n  // console.log(`Final monthlyCost: ${monthlyCosts[0]}`);\n  // console.log(`Final annualNERPerSqFt: ${annualNERPerSqFt}`);\n\n  return annualNERPerSqFt;\n};\n\n\n\nexport default calculateNER;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}