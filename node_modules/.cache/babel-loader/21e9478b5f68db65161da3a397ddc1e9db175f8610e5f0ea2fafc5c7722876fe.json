{"ast":null,"code":"const mockCalculateNER = (pkg, term, premiumPercent, managementCosts, packages) => {\n  // Get the base Term Rent from managementCosts\n  const baseTermRent = managementCosts.preOccupancy['Term Rent'];\n\n  // Calculate the adjusted Term Rent based on the premium percentage\n  const adjustedTermRent = baseTermRent * (1 + premiumPercent / 100);\n\n  // Calculate base NER (assuming Term Rent is annual, convert to monthly)\n  let baseNER = adjustedTermRent / 12;\n\n  // Adjust NER based on term (slight decrease for longer terms)\n  baseNER *= 1 - (term - 2) * 0.02; // 2% decrease per year above 2 years\n\n  // Adjust NER based on package\n  if (pkg === '8 + B') {\n    baseNER *= 8.15; // 15% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 8.30; // 30% higher for Package C\n  }\n\n  // Round to two decimal places\n  return Math.round(baseNER * 100) / 100;\n};\nexport default mockCalculateNER;","map":{"version":3,"names":["mockCalculateNER","pkg","term","premiumPercent","managementCosts","packages","baseTermRent","preOccupancy","adjustedTermRent","baseNER","Math","round"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/mockCalculateNER.ts"],"sourcesContent":["import { Package, ManagementCosts } from './data';\n\nconst mockCalculateNER = (\n  pkg: string, \n  term: number, \n  premiumPercent: number,\n  managementCosts: ManagementCosts,\n  packages: { [key: string]: Package }\n): number => {\n  // Get the base Term Rent from managementCosts\n  const baseTermRent = managementCosts.preOccupancy['Term Rent'];\n\n  // Calculate the adjusted Term Rent based on the premium percentage\n  const adjustedTermRent = baseTermRent * (1 + (premiumPercent / 100));\n\n  // Calculate base NER (assuming Term Rent is annual, convert to monthly)\n  let baseNER = adjustedTermRent / 12;\n\n  // Adjust NER based on term (slight decrease for longer terms)\n  baseNER *= (1 - (term - 2) * 0.02); // 2% decrease per year above 2 years\n\n  // Adjust NER based on package\n  if (pkg === '8 + B') {\n    baseNER *= 8.15; // 15% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 8.30; // 30% higher for Package C\n  }\n\n  // Round to two decimal places\n  return Math.round(baseNER * 100) / 100;\n};\n\nexport default mockCalculateNER;"],"mappings":"AAEA,MAAMA,gBAAgB,GAAGA,CACvBC,GAAW,EACXC,IAAY,EACZC,cAAsB,EACtBC,eAAgC,EAChCC,QAAoC,KACzB;EACX;EACA,MAAMC,YAAY,GAAGF,eAAe,CAACG,YAAY,CAAC,WAAW,CAAC;;EAE9D;EACA,MAAMC,gBAAgB,GAAGF,YAAY,IAAI,CAAC,GAAIH,cAAc,GAAG,GAAI,CAAC;;EAEpE;EACA,IAAIM,OAAO,GAAGD,gBAAgB,GAAG,EAAE;;EAEnC;EACAC,OAAO,IAAK,CAAC,GAAG,CAACP,IAAI,GAAG,CAAC,IAAI,IAAK,CAAC,CAAC;;EAEpC;EACA,IAAID,GAAG,KAAK,OAAO,EAAE;IACnBQ,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM,IAAIR,GAAG,KAAK,GAAG,EAAE;IACtBQ,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB;;EAEA;EACA,OAAOC,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG;AACxC,CAAC;AAED,eAAeT,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}