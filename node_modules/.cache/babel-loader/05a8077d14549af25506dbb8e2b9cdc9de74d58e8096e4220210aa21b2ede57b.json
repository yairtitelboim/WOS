{"ast":null,"code":"import { RSF } from './data';\nconst packageConfigs = {\n  A: ['Term Rent', 'Opex (monthly)', 'WiFi', 'Upfront WiFi', 'Branding/Signage'],\n  B: ['Term Rent', 'Opex (monthly)', 'WiFi', 'Upfront WiFi', 'Branding/Signage', 'Furniture', 'Plants', 'Plants Upfront', 'Cabling and Drops', 'F&B'],\n  C: ['Term Rent', 'Opex (monthly)', 'WiFi', 'Upfront WiFi', 'Branding/Signage', 'Furniture', 'Plants', 'Plants Upfront', 'Cabling and Drops', 'F&B', 'Dedicated WX', 'IT/AV Help Desk']\n};\nconst calculateMonthlyCashFlow = (pkg, term, month, managementCosts) => {\n  let revenue = 0;\n  let cost = 0;\n  packageConfigs[pkg].forEach(item => {\n    if (managementCosts.preOccupancy[item]) {\n      if (month === 0) {\n        // Only apply preOccupancy costs in the first month\n        const preOccupancyCost = managementCosts.preOccupancy[item] * RSF;\n        revenue += preOccupancyCost;\n        cost += preOccupancyCost;\n      }\n    } else if (managementCosts.recurring[item]) {\n      const recurringCost = managementCosts.recurring[item];\n      revenue += recurringCost * (item === 'Term Rent' ? RSF : 1);\n      cost += recurringCost * (item === 'Opex (monthly)' ? RSF : 1);\n    }\n  });\n  return {\n    revenue,\n    cost\n  };\n};\nconst getTermAdjustment = term => {\n  const discounts = {\n    2: 1,\n    3: 0.95,\n    4: 0.90,\n    5: 0.85\n  };\n  return discounts[term] || 1;\n};\nconst calculateNER = (pkg, term, discountRate, managementCosts) => {\n  console.log(`calculateNER called with pkg: ${pkg}, term: ${term}, discountRate: ${discountRate}`);\n  if (!pkg || !term || isNaN(term) || !discountRate || isNaN(discountRate)) {\n    console.error('Invalid inputs to calculateNER:', {\n      pkg,\n      term,\n      discountRate\n    });\n    return 0;\n  }\n  const monthlyRevenues = [];\n  const monthlyCosts = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    const {\n      revenue,\n      cost\n    } = calculateMonthlyCashFlow(pkg, term, month, managementCosts);\n    const termAdjustment = getTermAdjustment(term);\n    monthlyRevenues.push(revenue * termAdjustment);\n    monthlyCosts.push(cost);\n  }\n\n  // Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = npv * monthlyRate * (1 + monthlyRate) ** numberOfPayments / ((1 + monthlyRate) ** numberOfPayments - 1);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = ner * 12 / RSF;\n  console.log(`Annual NER per square foot: $${annualNERPerSqFt.toFixed(2)}`);\n  return annualNERPerSqFt;\n};\nexport default calculateNER;","map":{"version":3,"names":["RSF","packageConfigs","A","B","C","calculateMonthlyCashFlow","pkg","term","month","managementCosts","revenue","cost","forEach","item","preOccupancy","preOccupancyCost","recurring","recurringCost","getTermAdjustment","discounts","calculateNER","discountRate","console","log","isNaN","error","monthlyRevenues","monthlyCosts","termAdjustment","push","cashFlows","map","index","monthlyRate","npv","reduce","sum","cf","Math","pow","numberOfPayments","ner","annualNERPerSqFt","toFixed"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/data.ts"],"sourcesContent":["import { RSF, ManagementCosts } from './data';\n\nconst packageConfigs = {\n  A: ['Term Rent', 'Opex (monthly)', 'WiFi', 'Upfront WiFi', 'Branding/Signage'],\n  B: ['Term Rent', 'Opex (monthly)', 'WiFi', 'Upfront WiFi', 'Branding/Signage', 'Furniture', 'Plants', 'Plants Upfront', 'Cabling and Drops', 'F&B'],\n  C: ['Term Rent', 'Opex (monthly)', 'WiFi', 'Upfront WiFi', 'Branding/Signage', 'Furniture', 'Plants', 'Plants Upfront', 'Cabling and Drops', 'F&B', 'Dedicated WX', 'IT/AV Help Desk']\n};\n\nconst calculateMonthlyCashFlow = (pkg: string, term: number, month: number, managementCosts: ManagementCosts) => {\n  let revenue = 0;\n  let cost = 0;\n\n  packageConfigs[pkg as keyof typeof packageConfigs].forEach(item => {\n    if (managementCosts.preOccupancy[item as keyof ManagementCosts['preOccupancy']]) {\n      if (month === 0) {  // Only apply preOccupancy costs in the first month\n        const preOccupancyCost = managementCosts.preOccupancy[item as keyof ManagementCosts['preOccupancy']] * RSF;\n        revenue += preOccupancyCost;\n        cost += preOccupancyCost;\n      }\n    } else if (managementCosts.recurring[item as keyof ManagementCosts['recurring']]) {\n      const recurringCost = managementCosts.recurring[item as keyof ManagementCosts['recurring']];\n      revenue += recurringCost * (item === 'Term Rent' ? RSF : 1);\n      cost += recurringCost * (item === 'Opex (monthly)' ? RSF : 1);\n    }\n  });\n\n  return { revenue, cost };\n};\n\nconst getTermAdjustment = (term: number) => {\n  const discounts = { 2: 1, 3: 0.95, 4: 0.90, 5: 0.85 };\n  return discounts[term as keyof typeof discounts] || 1;\n};\n\nconst calculateNER = (pkg: string, term: number, discountRate: number, managementCosts: ManagementCosts): number => {\n  console.log(`calculateNER called with pkg: ${pkg}, term: ${term}, discountRate: ${discountRate}`);\n\n  if (!pkg || !term || isNaN(term) || !discountRate || isNaN(discountRate)) {\n    console.error('Invalid inputs to calculateNER:', { pkg, term, discountRate });\n    return 0;\n  }\n\n  const monthlyRevenues: number[] = [];\n  const monthlyCosts: number[] = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    const { revenue, cost } = calculateMonthlyCashFlow(pkg, term, month, managementCosts);\n    const termAdjustment = getTermAdjustment(term);\n    monthlyRevenues.push(revenue * termAdjustment);\n    monthlyCosts.push(cost);\n  }\n\n  // Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = (npv * monthlyRate * (1 + monthlyRate) ** numberOfPayments) / ((1 + monthlyRate) ** numberOfPayments - 1);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = (ner * 12) / RSF;\n\n  console.log(`Annual NER per square foot: $${annualNERPerSqFt.toFixed(2)}`);\n\n  return annualNERPerSqFt;\n};\n\nexport default calculateNER;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}