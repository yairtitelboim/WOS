{"ast":null,"code":"import { RSF, managementCosts } from './data';\nconst calculateNPV = (cashFlows, rate) => {\n  return cashFlows.reduce((npv, cashFlow, index) => {\n    return npv + cashFlow / Math.pow(1 + rate, index);\n  }, 0);\n};\nconst calculatePMT = (rate, nper, pv) => {\n  return pv * rate / (1 - Math.pow(1 + rate, -nper));\n};\nconst calculateNER = (term, discountRate, pkg) => {\n  const monthlyRate = discountRate / 12;\n  const numberOfMonths = term * 12;\n\n  // Calculate monthly cash flows\n  const monthlyCashFlows = Array(numberOfMonths).fill(0).map((_, index) => {\n    let cashFlow = 0;\n\n    // Base Rent (assuming it's the 'Term Rent' from preOccupancy)\n    cashFlow += managementCosts.preOccupancy['Term Rent'];\n\n    // OpEx (assuming it's the 'Opex (monthly)' from recurring)\n    cashFlow -= managementCosts.recurring['Opex (monthly)'];\n\n    // Free Rent (assuming first month is free)\n    if (index === 0) {\n      cashFlow -= managementCosts.preOccupancy['Term Rent'];\n    }\n\n    // One-time costs (assuming they occur in the first month)\n    if (index === 0) {\n      cashFlow -= managementCosts.preOccupancy['Upfront WiFi'];\n      cashFlow -= managementCosts.preOccupancy['Branding/Signage'];\n      if (pkg === 'B' || pkg === 'C') {\n        cashFlow -= managementCosts.preOccupancy['Furniture'];\n        cashFlow -= managementCosts.preOccupancy['Plants Upfront'];\n        cashFlow -= managementCosts.preOccupancy['Cabling and Drops'];\n      }\n      // Add commission and TI cost (you'll need to define these values)\n      cashFlow -= 40; // Example commission\n      cashFlow -= 20; // Example TI cost\n    }\n\n    // Recurring costs\n    if (pkg === 'B' || pkg === 'C') {\n      cashFlow -= managementCosts.recurring['Plants'];\n      cashFlow -= managementCosts.recurring['F&B'];\n    }\n    if (pkg === 'C') {\n      cashFlow -= managementCosts.recurring['Dedicated WX'] / 12; // Assuming this is an annual cost\n      cashFlow -= managementCosts.recurring['IT/AV Help Desk'];\n    }\n    return cashFlow * RSF; // Convert to total cash flow for all RSF\n  });\n  const npv = calculateNPV(monthlyCashFlows, monthlyRate);\n  const ner = -calculatePMT(monthlyRate, numberOfMonths, npv);\n  return ner / RSF; // Convert back to per square foot\n};\nexport default calculateNER;","map":{"version":3,"names":["RSF","managementCosts","calculateNPV","cashFlows","rate","reduce","npv","cashFlow","index","Math","pow","calculatePMT","nper","pv","calculateNER","term","discountRate","pkg","monthlyRate","numberOfMonths","monthlyCashFlows","Array","fill","map","_","preOccupancy","recurring","ner"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/calculateNER.ts"],"sourcesContent":["import { RSF, managementCosts } from './data';\n\nconst calculateNPV = (cashFlows: number[], rate: number): number => {\n  return cashFlows.reduce((npv, cashFlow, index) => {\n    return npv + cashFlow / Math.pow(1 + rate, index);\n  }, 0);\n};\n\nconst calculatePMT = (rate: number, nper: number, pv: number): number => {\n  return (pv * rate) / (1 - Math.pow(1 + rate, -nper));\n};\n\nconst calculateNER = (term: number, discountRate: number, pkg: string): number => {\n  const monthlyRate = discountRate / 12;\n  const numberOfMonths = term * 12;\n\n  // Calculate monthly cash flows\n  const monthlyCashFlows = Array(numberOfMonths).fill(0).map((_, index) => {\n    let cashFlow = 0;\n    \n    // Base Rent (assuming it's the 'Term Rent' from preOccupancy)\n    cashFlow += managementCosts.preOccupancy['Term Rent'];\n    \n    // OpEx (assuming it's the 'Opex (monthly)' from recurring)\n    cashFlow -= managementCosts.recurring['Opex (monthly)'];\n    \n    // Free Rent (assuming first month is free)\n    if (index === 0) {\n      cashFlow -= managementCosts.preOccupancy['Term Rent'];\n    }\n    \n    // One-time costs (assuming they occur in the first month)\n    if (index === 0) {\n      cashFlow -= managementCosts.preOccupancy['Upfront WiFi'];\n      cashFlow -= managementCosts.preOccupancy['Branding/Signage'];\n      if (pkg === 'B' || pkg === 'C') {\n        cashFlow -= managementCosts.preOccupancy['Furniture'];\n        cashFlow -= managementCosts.preOccupancy['Plants Upfront'];\n        cashFlow -= managementCosts.preOccupancy['Cabling and Drops'];\n      }\n      // Add commission and TI cost (you'll need to define these values)\n      cashFlow -= 40; // Example commission\n      cashFlow -= 20; // Example TI cost\n    }\n    \n    // Recurring costs\n    if (pkg === 'B' || pkg === 'C') {\n      cashFlow -= managementCosts.recurring['Plants'];\n      cashFlow -= managementCosts.recurring['F&B'];\n    }\n    if (pkg === 'C') {\n      cashFlow -= managementCosts.recurring['Dedicated WX'] / 12; // Assuming this is an annual cost\n      cashFlow -= managementCosts.recurring['IT/AV Help Desk'];\n    }\n    \n    return cashFlow * RSF; // Convert to total cash flow for all RSF\n  });\n\n  const npv = calculateNPV(monthlyCashFlows, monthlyRate);\n  const ner = -calculatePMT(monthlyRate, numberOfMonths, npv);\n\n  return ner / RSF; // Convert back to per square foot\n};\n\nexport default calculateNER;"],"mappings":"AAAA,SAASA,GAAG,EAAEC,eAAe,QAAQ,QAAQ;AAE7C,MAAMC,YAAY,GAAGA,CAACC,SAAmB,EAAEC,IAAY,KAAa;EAClE,OAAOD,SAAS,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAChD,OAAOF,GAAG,GAAGC,QAAQ,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,IAAI,EAAEI,KAAK,CAAC;EACnD,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAED,MAAMG,YAAY,GAAGA,CAACP,IAAY,EAAEQ,IAAY,EAAEC,EAAU,KAAa;EACvE,OAAQA,EAAE,GAAGT,IAAI,IAAK,CAAC,GAAGK,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,IAAI,EAAE,CAACQ,IAAI,CAAC,CAAC;AACtD,CAAC;AAED,MAAME,YAAY,GAAGA,CAACC,IAAY,EAAEC,YAAoB,EAAEC,GAAW,KAAa;EAChF,MAAMC,WAAW,GAAGF,YAAY,GAAG,EAAE;EACrC,MAAMG,cAAc,GAAGJ,IAAI,GAAG,EAAE;;EAEhC;EACA,MAAMK,gBAAgB,GAAGC,KAAK,CAACF,cAAc,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEhB,KAAK,KAAK;IACvE,IAAID,QAAQ,GAAG,CAAC;;IAEhB;IACAA,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,WAAW,CAAC;;IAErD;IACAlB,QAAQ,IAAIN,eAAe,CAACyB,SAAS,CAAC,gBAAgB,CAAC;;IAEvD;IACA,IAAIlB,KAAK,KAAK,CAAC,EAAE;MACfD,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,WAAW,CAAC;IACvD;;IAEA;IACA,IAAIjB,KAAK,KAAK,CAAC,EAAE;MACfD,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,cAAc,CAAC;MACxDlB,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,kBAAkB,CAAC;MAC5D,IAAIR,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,GAAG,EAAE;QAC9BV,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,WAAW,CAAC;QACrDlB,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,gBAAgB,CAAC;QAC1DlB,QAAQ,IAAIN,eAAe,CAACwB,YAAY,CAAC,mBAAmB,CAAC;MAC/D;MACA;MACAlB,QAAQ,IAAI,EAAE,CAAC,CAAC;MAChBA,QAAQ,IAAI,EAAE,CAAC,CAAC;IAClB;;IAEA;IACA,IAAIU,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,GAAG,EAAE;MAC9BV,QAAQ,IAAIN,eAAe,CAACyB,SAAS,CAAC,QAAQ,CAAC;MAC/CnB,QAAQ,IAAIN,eAAe,CAACyB,SAAS,CAAC,KAAK,CAAC;IAC9C;IACA,IAAIT,GAAG,KAAK,GAAG,EAAE;MACfV,QAAQ,IAAIN,eAAe,CAACyB,SAAS,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC;MAC5DnB,QAAQ,IAAIN,eAAe,CAACyB,SAAS,CAAC,iBAAiB,CAAC;IAC1D;IAEA,OAAOnB,QAAQ,GAAGP,GAAG,CAAC,CAAC;EACzB,CAAC,CAAC;EAEF,MAAMM,GAAG,GAAGJ,YAAY,CAACkB,gBAAgB,EAAEF,WAAW,CAAC;EACvD,MAAMS,GAAG,GAAG,CAAChB,YAAY,CAACO,WAAW,EAAEC,cAAc,EAAEb,GAAG,CAAC;EAE3D,OAAOqB,GAAG,GAAG3B,GAAG,CAAC,CAAC;AACpB,CAAC;AAED,eAAec,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}