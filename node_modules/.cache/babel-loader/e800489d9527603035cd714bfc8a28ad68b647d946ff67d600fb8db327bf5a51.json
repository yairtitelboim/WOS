{"ast":null,"code":"// Import necessary functions and types\nimport { calculateMonthlyTotal } from './data';\n\n// Helper function to calculate monthly cost\nexport const calculateMonthlyCost = (pkg, term, managementCosts, packages) => {\n  return calculateMonthlyTotal(pkg, term);\n};\n\n// Update this function in PricingMatrix component\nexport const updatePricingMatrix = (isManagementMode, managementCosts, packages, calculateNER) => {\n  const pricing = {};\n  const terms = [2, 3, 4, 5];\n  const pkgs = ['A', 'B', 'C'];\n  terms.forEach(term => {\n    pricing[term.toString()] = {};\n    pkgs.forEach(pkg => {\n      if (isManagementMode) {\n        pricing[term.toString()][pkg] = calculateNER(pkg, term, 0.08); // Use the same discount rate as in Sidebar\n      } else {\n        pricing[term.toString()][pkg] = calculateMonthlyCost(pkg, term, managementCosts, packages);\n      }\n    });\n  });\n  return pricing;\n};","map":{"version":3,"names":["calculateMonthlyTotal","calculateMonthlyCost","pkg","term","managementCosts","packages","updatePricingMatrix","isManagementMode","calculateNER","pricing","terms","pkgs","forEach","toString"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/pricingCalculations.ts"],"sourcesContent":["// Import necessary functions and types\nimport { ManagementCosts, RSF, Package, calculateMonthlyTotal } from './data';\n\n// Helper function to calculate monthly cost\nexport const calculateMonthlyCost = (\n    pkg: string, \n    term: number, \n    managementCosts: ManagementCosts, \n    packages: { [key: string]: Package }\n  ): number => {\n  return calculateMonthlyTotal(pkg, term);\n};\n\n\n// Update this function in PricingMatrix component\nexport const updatePricingMatrix = (\n    isManagementMode: boolean, \n    managementCosts: ManagementCosts, \n    packages: { [key: string]: Package },\n    calculateNER: (pkg: string, term: number, discountRate: number) => number\n  ): { [key: string]: { [key: string]: number } } => {\n  const pricing: { [key: string]: { [key: string]: number } } = {};\n  const terms = [2, 3, 4, 5];\n  const pkgs = ['A', 'B', 'C'];\n\n  terms.forEach(term => {\n    pricing[term.toString()] = {};\n    pkgs.forEach(pkg => {\n      if (isManagementMode) {\n        pricing[term.toString()][pkg] = calculateNER(pkg, term, 0.08); // Use the same discount rate as in Sidebar\n      } else {\n        pricing[term.toString()][pkg] = calculateMonthlyCost(pkg, term, managementCosts, packages);\n      }\n    });\n  });\n\n  return pricing;\n};"],"mappings":"AAAA;AACA,SAAwCA,qBAAqB,QAAQ,QAAQ;;AAE7E;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAChCC,GAAW,EACXC,IAAY,EACZC,eAAgC,EAChCC,QAAoC,KACzB;EACb,OAAOL,qBAAqB,CAACE,GAAG,EAAEC,IAAI,CAAC;AACzC,CAAC;;AAGD;AACA,OAAO,MAAMG,mBAAmB,GAAGA,CAC/BC,gBAAyB,EACzBH,eAAgC,EAChCC,QAAoC,EACpCG,YAAyE,KACxB;EACnD,MAAMC,OAAqD,GAAG,CAAC,CAAC;EAChE,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1B,MAAMC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAE5BD,KAAK,CAACE,OAAO,CAACT,IAAI,IAAI;IACpBM,OAAO,CAACN,IAAI,CAACU,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7BF,IAAI,CAACC,OAAO,CAACV,GAAG,IAAI;MAClB,IAAIK,gBAAgB,EAAE;QACpBE,OAAO,CAACN,IAAI,CAACU,QAAQ,CAAC,CAAC,CAAC,CAACX,GAAG,CAAC,GAAGM,YAAY,CAACN,GAAG,EAAEC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;MACjE,CAAC,MAAM;QACLM,OAAO,CAACN,IAAI,CAACU,QAAQ,CAAC,CAAC,CAAC,CAACX,GAAG,CAAC,GAAGD,oBAAoB,CAACC,GAAG,EAAEC,IAAI,EAAEC,eAAe,EAAEC,QAAQ,CAAC;MAC5F;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOI,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}