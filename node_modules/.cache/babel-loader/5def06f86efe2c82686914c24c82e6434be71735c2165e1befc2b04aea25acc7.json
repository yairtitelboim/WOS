{"ast":null,"code":"// pricingCalculations.ts\n\nimport { calculateMonthlyTotal } from './data';\n\n// Helper function to calculate monthly cost\nexport const calculateMonthlyCost = (pkg, term, managementCosts, packages) => {\n  return calculateMonthlyTotal(pkg, term);\n};\n\n// Update this function in PricingMatrix component\nexport const updatePricingMatrix = (isManagementMode, managementCosts, packages, calculateNER) => {\n  const pricing = {};\n  const terms = [2, 3, 4, 5];\n  const pkgs = ['A', 'B', 'C'];\n  terms.forEach(term => {\n    pricing[term.toString()] = {};\n    pkgs.forEach(pkg => {\n      if (isManagementMode) {\n        pricing[term.toString()][pkg] = calculateNER(pkg, term, 0.08); // Use the same discount rate as in Sidebar\n      } else {\n        pricing[term.toString()][pkg] = calculateMonthlyCost(pkg, term, managementCosts, packages);\n      }\n    });\n  });\n  return pricing;\n};\n\n// Helper function to calculate term rent\nexport const calculateTermRent = (term, baseTermRent, termPremium) => {\n  if (term === 5) return baseTermRent;\n  return baseTermRent * (1 + (5 - term) * (termPremium / 100));\n};\n\n// Helper function to calculate base rent\nexport const calculateBaseRent = (baseCost, term, RSF) => {\n  if (term === 5) return baseCost * RSF / 12;\n  const maxIncrease = 0.3; // 30% max increase for 2-year terms\n  const increasePerYear = maxIncrease / 3; // Distribute the increase over 3 years (5 to 2)\n  const adjustedBaseCost = baseCost * (1 + (5 - term) * increasePerYear);\n  return adjustedBaseCost * RSF / 12; // Monthly cost\n};\n\n// Helper function to calculate WiFi cost\nexport const calculateWifi = (monthlyRate, upfrontCost, RSF, term) => {\n  return monthlyRate + upfrontCost * RSF / (term * 12);\n};\n\n// Helper function to calculate furniture cost\nexport const calculateFurniture = (cost, RSF, term) => {\n  return cost * RSF / (term * 12);\n};\n\n// Helper function to calculate plants cost\nexport const calculatePlants = (cost, RSF) => {\n  return cost * RSF;\n};\n\n// Helper function to calculate branding and signage cost\nexport const calculateBrandingSignage = (cost, RSF) => {\n  return cost * RSF;\n};\n\n// Export these functions for use in other files\nexport { calculateTermRent, calculateBaseRent, calculateWifi, calculateFurniture, calculatePlants, calculateBrandingSignage };","map":{"version":3,"names":["calculateMonthlyTotal","calculateMonthlyCost","pkg","term","managementCosts","packages","updatePricingMatrix","isManagementMode","calculateNER","pricing","terms","pkgs","forEach","toString","calculateTermRent","baseTermRent","termPremium","calculateBaseRent","baseCost","RSF","maxIncrease","increasePerYear","adjustedBaseCost","calculateWifi","monthlyRate","upfrontCost","calculateFurniture","cost","calculatePlants","calculateBrandingSignage"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/pricingCalculations.ts"],"sourcesContent":["// pricingCalculations.ts\n\nimport { ManagementCosts, RSF, Package, calculateMonthlyTotal } from './data';\n\n// Helper function to calculate monthly cost\nexport const calculateMonthlyCost = (\n    pkg: string, \n    term: number, \n    managementCosts: ManagementCosts, \n    packages: { [key: string]: Package }\n): number => {\n    return calculateMonthlyTotal(pkg, term);\n};\n\n// Update this function in PricingMatrix component\nexport const updatePricingMatrix = (\n    isManagementMode: boolean, \n    managementCosts: ManagementCosts, \n    packages: { [key: string]: Package },\n    calculateNER: (pkg: string, term: number, discountRate: number) => number\n): { [key: string]: { [key: string]: number } } => {\n    const pricing: { [key: string]: { [key: string]: number } } = {};\n    const terms = [2, 3, 4, 5];\n    const pkgs = ['A', 'B', 'C'];\n\n    terms.forEach(term => {\n        pricing[term.toString()] = {};\n        pkgs.forEach(pkg => {\n            if (isManagementMode) {\n                pricing[term.toString()][pkg] = calculateNER(pkg, term, 0.08); // Use the same discount rate as in Sidebar\n            } else {\n                pricing[term.toString()][pkg] = calculateMonthlyCost(pkg, term, managementCosts, packages);\n            }\n        });\n    });\n\n    return pricing;\n};\n\n// Helper function to calculate term rent\nexport const calculateTermRent = (term: number, baseTermRent: number, termPremium: number): number => {\n    if (term === 5) return baseTermRent;\n    return baseTermRent * (1 + ((5 - term) * (termPremium / 100)));\n};\n\n// Helper function to calculate base rent\nexport const calculateBaseRent = (baseCost: number, term: number, RSF: number): number => {\n    if (term === 5) return baseCost * RSF / 12;\n    const maxIncrease = 0.3; // 30% max increase for 2-year terms\n    const increasePerYear = maxIncrease / 3; // Distribute the increase over 3 years (5 to 2)\n    const adjustedBaseCost = baseCost * (1 + (5 - term) * increasePerYear);\n    return (adjustedBaseCost * RSF) / 12; // Monthly cost\n};\n\n// Helper function to calculate WiFi cost\nexport const calculateWifi = (monthlyRate: number, upfrontCost: number, RSF: number, term: number): number => {\n    return monthlyRate + (upfrontCost * RSF) / (term * 12);\n};\n\n// Helper function to calculate furniture cost\nexport const calculateFurniture = (cost: number, RSF: number, term: number): number => {\n    return (cost * RSF) / (term * 12);\n};\n\n// Helper function to calculate plants cost\nexport const calculatePlants = (cost: number, RSF: number): number => {\n    return cost * RSF;\n};\n\n// Helper function to calculate branding and signage cost\nexport const calculateBrandingSignage = (cost: number, RSF: number): number => {\n    return cost * RSF;\n};\n\n// Export these functions for use in other files\nexport {\n    calculateTermRent,\n    calculateBaseRent,\n    calculateWifi,\n    calculateFurniture,\n    calculatePlants,\n    calculateBrandingSignage\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}