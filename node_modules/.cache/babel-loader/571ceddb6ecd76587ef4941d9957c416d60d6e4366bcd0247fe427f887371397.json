{"ast":null,"code":"const mockCalculateNER = (pkg, term, discountRate, managementCosts, packages, termPremium) => {\n  // Base NER calculation\n  let baseNER = 70 - term * 5; // Starts at $70 for 2-year term, decreases by $5 for each year\n\n  // Adjust NER based on package\n  if (pkg === 'B') {\n    baseNER *= 1.15; // 15% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 1.30; // 30% higher for Package C\n  }\n\n  // Adjust NER based on termPremium\n  // Assuming a 1% increase in termPremium results in a 0.5% increase in NER\n  const premiumAdjustment = 1 + termPremium * 0.005;\n  baseNER *= premiumAdjustment;\n\n  // Add some randomness (±$2)\n  const randomFactor = (Math.random() - 0.5) * 4;\n\n  // Ensure NER stays within $50-$80 range (increased upper limit to account for premium)\n  return Math.min(Math.max(baseNER + randomFactor, 50), 80);\n};\nexport default mockCalculateNER;","map":{"version":3,"names":["mockCalculateNER","pkg","term","discountRate","managementCosts","packages","termPremium","baseNER","premiumAdjustment","randomFactor","Math","random","min","max"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/mockCalculateNER.ts"],"sourcesContent":["import { Package } from './data';\n\nconst mockCalculateNER = (\n  pkg: string, \n  term: number, \n  discountRate: number, \n  managementCosts: any, \n  packages: { [key: string]: Package },\n  termPremium: number // Add termPremium as a parameter\n): number => {\n  // Base NER calculation\n  let baseNER = 70 - (term * 5); // Starts at $70 for 2-year term, decreases by $5 for each year\n\n  // Adjust NER based on package\n  if (pkg === 'B') {\n    baseNER *= 1.15; // 15% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 1.30; // 30% higher for Package C\n  }\n\n  // Adjust NER based on termPremium\n  // Assuming a 1% increase in termPremium results in a 0.5% increase in NER\n  const premiumAdjustment = 1 + (termPremium * 0.005);\n  baseNER *= premiumAdjustment;\n\n  // Add some randomness (±$2)\n  const randomFactor = (Math.random() - 0.5) * 4;\n  \n  // Ensure NER stays within $50-$80 range (increased upper limit to account for premium)\n  return Math.min(Math.max(baseNER + randomFactor, 50), 80);\n};\n\nexport default mockCalculateNER;"],"mappings":"AAEA,MAAMA,gBAAgB,GAAGA,CACvBC,GAAW,EACXC,IAAY,EACZC,YAAoB,EACpBC,eAAoB,EACpBC,QAAoC,EACpCC,WAAmB,KACR;EACX;EACA,IAAIC,OAAO,GAAG,EAAE,GAAIL,IAAI,GAAG,CAAE,CAAC,CAAC;;EAE/B;EACA,IAAID,GAAG,KAAK,GAAG,EAAE;IACfM,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM,IAAIN,GAAG,KAAK,GAAG,EAAE;IACtBM,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB;;EAEA;EACA;EACA,MAAMC,iBAAiB,GAAG,CAAC,GAAIF,WAAW,GAAG,KAAM;EACnDC,OAAO,IAAIC,iBAAiB;;EAE5B;EACA,MAAMC,YAAY,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;;EAE9C;EACA,OAAOD,IAAI,CAACE,GAAG,CAACF,IAAI,CAACG,GAAG,CAACN,OAAO,GAAGE,YAAY,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;AAC3D,CAAC;AAED,eAAeT,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}