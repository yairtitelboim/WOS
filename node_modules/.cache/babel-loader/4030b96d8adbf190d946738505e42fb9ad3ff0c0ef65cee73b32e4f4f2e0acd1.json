{"ast":null,"code":"import { RSF, managementCosts } from './data';\nconst calculateNER = (pkg, term, discountRate) => {\n  console.log(`\\nCalculating NER for Package ${pkg}, Term: ${term} years, Discount Rate: ${discountRate * 100}%`);\n  console.log(`RSF: ${RSF}`);\n  const monthlyRevenues = [];\n  const monthlyCosts = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // 1. Calculate Revenue\n    // Base rent (per square foot per year, converted to monthly)\n    monthlyRevenue += managementCosts.preOccupancy['Term Rent'] * RSF / 12;\n\n    // WiFi Revenue (monthly fee)\n    monthlyRevenue += managementCosts.recurring['WiFi'];\n\n    // Branding/Signage (spread over the term)\n    monthlyRevenue += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n\n    // Add package-specific items\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyRevenue += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n      monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n      monthlyRevenue += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n      monthlyRevenue += managementCosts.recurring['F&B'];\n    }\n    if (pkg === 'C') {\n      monthlyRevenue += managementCosts.recurring['Dedicated WX'];\n      monthlyRevenue += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n    }\n\n    // 2. Calculate Costs\n    // OpEx (monthly)\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n\n    // WiFi (including upfront cost spread over the term)\n    monthlyCost += managementCosts.recurring['WiFi'] + managementCosts.preOccupancy['Upfront WiFi'] * RSF / (term * 12);\n\n    // Branding/Signage (spread over the term)\n    monthlyCost += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n\n    // Add package-specific costs\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Plants'] * RSF;\n      monthlyCost += managementCosts.recurring['F&B'];\n      monthlyCost += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n      monthlyCost += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n    }\n    if (pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Dedicated WX'];\n      monthlyCost += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n    }\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n\n    // Log details for the first month\n    if (month === 0) {\n      console.log('\\nFirst Month Details:');\n      console.log(`Revenue: $${monthlyRevenue.toFixed(2)}`);\n      console.log(`Cost: $${monthlyCost.toFixed(2)}`);\n    }\n  }\n\n  // 3. Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Log average monthly figures\n  const avgMonthlyRevenue = monthlyRevenues.reduce((sum, value) => sum + value, 0) / monthlyRevenues.length;\n  const avgMonthlyCost = monthlyCosts.reduce((sum, value) => sum + value, 0) / monthlyCosts.length;\n  const avgMonthlyCashFlow = cashFlows.reduce((sum, value) => sum + value, 0) / cashFlows.length;\n  console.log('\\nAverage Monthly Figures:');\n  console.log(`Revenue: $${avgMonthlyRevenue.toFixed(2)}`);\n  console.log(`Cost: $${avgMonthlyCost.toFixed(2)}`);\n  console.log(`Cash Flow: $${avgMonthlyCashFlow.toFixed(2)}`);\n\n  // 4. Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n  console.log(`\\nNPV: $${npv.toFixed(2)}`);\n\n  // 5. Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = npv * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));\n  console.log(`Monthly NER: $${ner.toFixed(2)}`);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = ner * 12 / RSF;\n  console.log(`Annual NER per square foot: $${annualNERPerSqFt.toFixed(2)}`);\n  return annualNERPerSqFt;\n};\nexport default calculateNER;","map":{"version":3,"names":["RSF","managementCosts","calculateNER","pkg","term","discountRate","console","log","monthlyRevenues","monthlyCosts","month","monthlyRevenue","monthlyCost","preOccupancy","recurring","push","toFixed","cashFlows","map","revenue","index","avgMonthlyRevenue","reduce","sum","value","length","avgMonthlyCost","avgMonthlyCashFlow","monthlyRate","npv","cf","Math","pow","numberOfPayments","ner","annualNERPerSqFt"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/calculateNER.ts"],"sourcesContent":["import { RSF, managementCosts, packages } from './data';\n\nconst calculateNER = (pkg: string, term: number, discountRate: number): number => {\n  console.log(`\\nCalculating NER for Package ${pkg}, Term: ${term} years, Discount Rate: ${discountRate * 100}%`);\n  console.log(`RSF: ${RSF}`);\n\n  const monthlyRevenues: number[] = [];\n  const monthlyCosts: number[] = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // 1. Calculate Revenue\n    // Base rent (per square foot per year, converted to monthly)\n    monthlyRevenue += (managementCosts.preOccupancy['Term Rent'] * RSF) / 12;\n    \n    // WiFi Revenue (monthly fee)\n    monthlyRevenue += managementCosts.recurring['WiFi'];\n    \n    // Branding/Signage (spread over the term)\n    monthlyRevenue += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n\n    // Add package-specific items\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyRevenue += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n      monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n      monthlyRevenue += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n      monthlyRevenue += managementCosts.recurring['F&B'];\n    }\n\n    if (pkg === 'C') {\n      monthlyRevenue += managementCosts.recurring['Dedicated WX'];\n      monthlyRevenue += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n    }\n\n    // 2. Calculate Costs\n    // OpEx (monthly)\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n    \n    // WiFi (including upfront cost spread over the term)\n    monthlyCost += managementCosts.recurring['WiFi'] + (managementCosts.preOccupancy['Upfront WiFi'] * RSF) / (term * 12);\n    \n    // Branding/Signage (spread over the term)\n    monthlyCost += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n\n    // Add package-specific costs\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Plants'] * RSF;\n      monthlyCost += managementCosts.recurring['F&B'];\n      monthlyCost += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n      monthlyCost += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n    }\n\n    if (pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Dedicated WX'];\n      monthlyCost += managementCosts.recurring['IT/AV Help Desk'] * RSF;\n    }\n\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n\n    // Log details for the first month\n    if (month === 0) {\n      console.log('\\nFirst Month Details:');\n      console.log(`Revenue: $${monthlyRevenue.toFixed(2)}`);\n      console.log(`Cost: $${monthlyCost.toFixed(2)}`);\n    }\n  }\n\n  // 3. Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // Log average monthly figures\n  const avgMonthlyRevenue = monthlyRevenues.reduce((sum, value) => sum + value, 0) / monthlyRevenues.length;\n  const avgMonthlyCost = monthlyCosts.reduce((sum, value) => sum + value, 0) / monthlyCosts.length;\n  const avgMonthlyCashFlow = cashFlows.reduce((sum, value) => sum + value, 0) / cashFlows.length;\n\n  console.log('\\nAverage Monthly Figures:');\n  console.log(`Revenue: $${avgMonthlyRevenue.toFixed(2)}`);\n  console.log(`Cost: $${avgMonthlyCost.toFixed(2)}`);\n  console.log(`Cash Flow: $${avgMonthlyCashFlow.toFixed(2)}`);\n\n  // 4. Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  console.log(`\\nNPV: $${npv.toFixed(2)}`);\n\n  // 5. Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = (npv * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));\n\n  console.log(`Monthly NER: $${ner.toFixed(2)}`);\n\n  // Convert NER to per square foot per year\n  const annualNERPerSqFt = (ner * 12) / RSF;\n  console.log(`Annual NER per square foot: $${annualNERPerSqFt.toFixed(2)}`);\n\n  return annualNERPerSqFt;\n};\n\nexport default calculateNER;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}