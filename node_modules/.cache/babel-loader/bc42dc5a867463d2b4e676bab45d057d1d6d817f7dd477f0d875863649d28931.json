{"ast":null,"code":"const mockCalculateNER = (pkg, term, discountRate, managementCosts, packages) => {\n  // Base NER calculation\n  let baseNER = 60; // Starting point for NER\n\n  // Adjust NER based on term\n  baseNER += (5 - term) * 1; // Slight increase for shorter terms\n\n  // Adjust NER based on package\n  if (pkg === 'B') {\n    baseNER *= 1.10; // 10% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 1.20; // 20% higher for Package C\n  }\n\n  // Adjust NER based on term premium (discountRate)\n  // Increase NER by $2 for each percentage point of the discount rate\n  baseNER += discountRate * 2;\n\n  // Add some minor randomness (±$0.50)\n  const randomFactor = Math.random() - 0.5;\n  baseNER += randomFactor;\n\n  // Ensure NER stays within a reasonable range ($50-$120)\n  return Math.min(Math.max(baseNER, 50), 10);\n};\nexport default mockCalculateNER;","map":{"version":3,"names":["mockCalculateNER","pkg","term","discountRate","managementCosts","packages","baseNER","randomFactor","Math","random","min","max"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/mockCalculateNER.ts"],"sourcesContent":["import { Package, ManagementCosts } from './data';\n\nconst mockCalculateNER = (\n  pkg: string, \n  term: number, \n  discountRate: number,\n  managementCosts: ManagementCosts,\n  packages: { [key: string]: Package }\n): number => {\n  // Base NER calculation\n  let baseNER = 60; // Starting point for NER\n\n  // Adjust NER based on term\n  baseNER += (5 - term) * 1; // Slight increase for shorter terms\n\n  // Adjust NER based on package\n  if (pkg === 'B') {\n    baseNER *= 1.10; // 10% higher for Package B\n  } else if (pkg === 'C') {\n    baseNER *= 1.20; // 20% higher for Package C\n  }\n\n  // Adjust NER based on term premium (discountRate)\n  // Increase NER by $2 for each percentage point of the discount rate\n  baseNER += discountRate * 2;\n\n  // Add some minor randomness (±$0.50)\n  const randomFactor = (Math.random() - 0.5);\n  baseNER += randomFactor;\n\n  // Ensure NER stays within a reasonable range ($50-$120)\n  return Math.min(Math.max(baseNER, 50), 10);\n};\n\nexport default mockCalculateNER;"],"mappings":"AAEA,MAAMA,gBAAgB,GAAGA,CACvBC,GAAW,EACXC,IAAY,EACZC,YAAoB,EACpBC,eAAgC,EAChCC,QAAoC,KACzB;EACX;EACA,IAAIC,OAAO,GAAG,EAAE,CAAC,CAAC;;EAElB;EACAA,OAAO,IAAI,CAAC,CAAC,GAAGJ,IAAI,IAAI,CAAC,CAAC,CAAC;;EAE3B;EACA,IAAID,GAAG,KAAK,GAAG,EAAE;IACfK,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM,IAAIL,GAAG,KAAK,GAAG,EAAE;IACtBK,OAAO,IAAI,IAAI,CAAC,CAAC;EACnB;;EAEA;EACA;EACAA,OAAO,IAAIH,YAAY,GAAG,CAAC;;EAE3B;EACA,MAAMI,YAAY,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI;EAC1CH,OAAO,IAAIC,YAAY;;EAEvB;EACA,OAAOC,IAAI,CAACE,GAAG,CAACF,IAAI,CAACG,GAAG,CAACL,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;AAC5C,CAAC;AAED,eAAeN,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}