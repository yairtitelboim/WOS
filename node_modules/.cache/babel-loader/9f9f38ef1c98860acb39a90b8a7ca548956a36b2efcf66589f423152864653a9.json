{"ast":null,"code":"import { RSF, managementCosts } from './data';\nconst calculateNER = (pkg, term, discountRate) => {\n  const monthlyRevenues = [];\n  const monthlyCosts = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // 1. Calculate Revenue\n    // Base rent (per square foot per year, converted to monthly)\n    monthlyRevenue += managementCosts.preOccupancy['Term Rent'] * RSF / 12;\n\n    // WiFi Revenue (monthly fee)\n    monthlyRevenue += managementCosts.recurring['WiFi'];\n\n    // Branding/Signage (spread over the term)\n    monthlyRevenue += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n\n    // Add package-specific items\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyRevenue += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n      monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n      monthlyRevenue += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n      monthlyRevenue += managementCosts.recurring['F&B'];\n    }\n    if (pkg === 'C') {\n      monthlyRevenue += managementCosts.recurring['Dedicated WX'];\n      monthlyRevenue += managementCosts.recurring['IT/AV Help Desk'];\n    }\n\n    // 2. Calculate Costs\n    // OpEx (monthly)\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n\n    // WiFi (including upfront cost spread over the term)\n    monthlyCost += managementCosts.recurring['WiFi'] + managementCosts.preOccupancy['Upfront WiFi'] * RSF / (term * 12);\n\n    // Branding/Signage (spread over the term)\n    monthlyCost += managementCosts.preOccupancy['Branding/Signage'] * RSF / (term * 12);\n\n    // Add package-specific costs\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Plants'] * RSF;\n      monthlyCost += managementCosts.recurring['F&B'];\n      monthlyCost += managementCosts.preOccupancy['Furniture'] * RSF / (term * 12);\n      monthlyCost += managementCosts.preOccupancy['Cabling and Drops'] * RSF / (term * 12);\n    }\n    if (pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Dedicated WX'];\n      monthlyCost += managementCosts.recurring['IT/AV Help Desk'];\n    }\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n  }\n\n  // 3. Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // 4. Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // 5. Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = npv * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));\n\n  // Convert NER to per square foot per year\n  return ner * 12 / RSF;\n};\nexport default calculateNER;","map":{"version":3,"names":["RSF","managementCosts","calculateNER","pkg","term","discountRate","monthlyRevenues","monthlyCosts","month","monthlyRevenue","monthlyCost","preOccupancy","recurring","push","cashFlows","map","revenue","index","monthlyRate","npv","reduce","sum","cf","Math","pow","numberOfPayments","ner"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/SPEC/version-03/office-leasing-app/src/calculateNER.ts"],"sourcesContent":["import { RSF, managementCosts, packages } from './data';\n\nconst calculateNER = (pkg: string, term: number, discountRate: number): number => {\n  const monthlyRevenues: number[] = [];\n  const monthlyCosts: number[] = [];\n\n  // Calculate monthly revenue and costs for the entire term\n  for (let month = 0; month < term * 12; month++) {\n    let monthlyRevenue = 0;\n    let monthlyCost = 0;\n\n    // 1. Calculate Revenue\n    // Base rent (per square foot per year, converted to monthly)\n    monthlyRevenue += (managementCosts.preOccupancy['Term Rent'] * RSF) / 12;\n    \n    // WiFi Revenue (monthly fee)\n    monthlyRevenue += managementCosts.recurring['WiFi'];\n    \n    // Branding/Signage (spread over the term)\n    monthlyRevenue += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n\n    // Add package-specific items\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyRevenue += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n      monthlyRevenue += managementCosts.recurring['Plants'] * RSF;\n      monthlyRevenue += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n      monthlyRevenue += managementCosts.recurring['F&B'];\n    }\n\n    if (pkg === 'C') {\n      monthlyRevenue += managementCosts.recurring['Dedicated WX'];\n      monthlyRevenue += managementCosts.recurring['IT/AV Help Desk'];\n    }\n\n    // 2. Calculate Costs\n    // OpEx (monthly)\n    monthlyCost += managementCosts.recurring['Opex (monthly)'] * RSF;\n    \n    // WiFi (including upfront cost spread over the term)\n    monthlyCost += managementCosts.recurring['WiFi'] + (managementCosts.preOccupancy['Upfront WiFi'] * RSF) / (term * 12);\n    \n    // Branding/Signage (spread over the term)\n    monthlyCost += (managementCosts.preOccupancy['Branding/Signage'] * RSF) / (term * 12);\n\n    // Add package-specific costs\n    if (pkg === 'B' || pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Plants'] * RSF;\n      monthlyCost += managementCosts.recurring['F&B'];\n      monthlyCost += (managementCosts.preOccupancy['Furniture'] * RSF) / (term * 12);\n      monthlyCost += (managementCosts.preOccupancy['Cabling and Drops'] * RSF) / (term * 12);\n    }\n\n    if (pkg === 'C') {\n      monthlyCost += managementCosts.recurring['Dedicated WX'];\n      monthlyCost += managementCosts.recurring['IT/AV Help Desk'];\n    }\n\n    monthlyRevenues.push(monthlyRevenue);\n    monthlyCosts.push(monthlyCost);\n  }\n\n  // 3. Calculate monthly cash flows\n  const cashFlows = monthlyRevenues.map((revenue, index) => revenue - monthlyCosts[index]);\n\n  // 4. Calculate NPV\n  const monthlyRate = discountRate / 12;\n  const npv = cashFlows.reduce((sum, cf, index) => sum + cf / Math.pow(1 + monthlyRate, index + 1), 0);\n\n  // 5. Calculate NER (monthly payment that would result in the same NPV)\n  const numberOfPayments = term * 12;\n  const ner = (npv * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));\n\n  // Convert NER to per square foot per year\n  return (ner * 12) / RSF;\n};\n\nexport default calculateNER;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}